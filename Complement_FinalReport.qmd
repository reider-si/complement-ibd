---
title: "Complement in IBD"
format: 
  html:
    code-fold: true
    toc: true
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
      % Note: setting commandchars=\\\{\} here will cause an error 
    }
editor_options: 
  chunk_output_type: console
---

This project analysed the interaction between complement system components and intestinal microbiota in the context of intestinal inflammation in IBD. Data acquisition and experiments were conducted from 02-2016 until 2018 in Innsbruck, Austria.

```{r setup}
#| warning: false
library(tidyverse)
library(rstatix)
library(ggpubr)
library(reshape2)
library(dunn.test)
library(RColorBrewer)
library(colorspace)
source("code/FunctionsCustomBoxplotStat.R")
source("code/FunctionsHeatmapPlotting.R")


my_cols <- c("#669999", "#cc0000")
cutoffval = round(log(50), 2)       # sets hard limit on range of heatmap at 50 fold expression (for log heatmaps)


# read datasets
dat.qpcr = read.csv("data/qpcr_expression-data.csv", stringsAsFactors = T) %>%
  mutate(DISEASE = factor(DISEASE, labels = c("CD", "Control", "UC")),
         SITE = factor(SITE, labels = c("Ileum", "Cecum", "Ascending colon", "Transverse Colon", "Descending Colon", "Sigmoid", "Rectum")))
dat.elisa = read.csv("data/cohortB_ELISA.csv", sep = ";")
dat.fc = read.csv("data/cohortB_FC.csv", sep = ";")
dat.cohortB.demographics = read.csv("data/cohortB_Demographics.csv", sep =";")
dat.cohortB.lab = read.csv("data/CohortB_Lab.csv", sep = ";")
dat.wieslab = read.csv("data/cohortB_Wieslab.csv", sep = ";")

# remove empty rows 
dat.elisa = filter(dat.elisa, !is.na(PROT_C3))%>%
  left_join(dat.cohortB.demographics, by = "ID") %>%
  left_join(dat.cohortB.lab, by = "ID")
dat.wieslab = filter(dat.wieslab, !is.na(WIESLAB_CL1)) %>%
  left_join(dat.cohortB.demographics, by = "ID") %>%
  left_join(dat.cohortB.lab, by = "ID")
dat.fc = dat.fc %>%
  left_join(dat.cohortB.demographics, by = "ID") %>%
  left_join(dat.cohortB.lab, by = "ID") %>%
  filter(!is.na(PERC_IGA), DIS != "uncl") %>%
  mutate(SEX = factor(SEX, levels = c("male", "female"), labels = c("male", "female")),
         DIS = factor(DIS, levels = c("cd", "contr", "uc"), labels = c("CD", "Healthy", "UC")),
         DIS = relevel(DIS, ref = "Healthy"),
         CALPRO2 = cut(CALPRO, breaks = c(-Inf, 100, Inf)),
         CALPRO4 = cut(CALPRO, breaks = c(-Inf, 50, 250, Inf),labels = c("< 50", "50-250", "> 250")),
         M_A = ifelse(M_A %in% c(1,2,3), M_A, NA) %>% factor(levels = c(1,2,3), labels = c("A1", "A2", "A3")),
         M_B = ifelse(M_B %in% c(1,2,3,4), M_B, NA) %>% factor(levels = c(1,2,3,4), labels = c("B1","B2","B3", "B3p")),
         M_L = ifelse(M_L %in% c(1,2,3,4), M_L, NA) %>% factor(levels = c(1,2,3,4), labels = c("L1", "L2", "L3", "L4")),
         M_E = ifelse(M_E %in% c(1,2,3), M_E, NA) %>% factor(levels = c(1,2,3), labels = c("E1", "E2", "E3"))) 

# sorting data are already an .rds file containing a phylosec object generated by a separate script
# dat.sort = readRDS("data/dada2physeq.RDS")
```

# Background information and Introduction

The complement project includes 3 distinct cohorts:

1.  Complement_CohortA_2023-02-17.xlsx
2.  Complement_CohortB_2023-02-17.xlsx
3.  Complement_CohortSorting_2023-02-17.xlsx

Cohort A contains patients for which intestinal biopsies were collected and therefore is the basis of qPCR analysis.

Cohort B is a subcohort of the Innsbruck IBD cohort biobank which includes fecal samples. From this cohort, Flow Cytometry measurements and protein levels in feces and serum are derived.

Cohort C is another small subcohort of the Innsbruck IBD cohort. Fecal samples from these patients have been subjected to fluorescence assisted cell sorting (FACS). From these data, microbiome composition has been derived.

For data analysis, separate *.csv* files for each data types were exported from the relevant excel files and are available from the *data/* subfolder.

## Introduction

# Methods

# Results

## Cohort statistics

include information on composition of all three subcohorts regarding the following levels:

-   disease diagnosis

-   sex

-   lesional-non-lesional

For qPCR: include Histo and Site

for CohortB: ...

for Cohort C: MEan calpro levels etc.

### Cohort A: qPCR

```{r cohort_statA}
# Cohort statistics of the qPCR subcohort

summary(dat.qpcr$DISEASE) %>% t() %>%
  as.data.frame() %>%
  pivot_longer(CD:UC,names_to = "Disease", values_to = "n") %>%
  knitr::kable(caption = "patient numbers by disease in qpcr cohort")

  
table(dat.qpcr$LESIONAL, dat.qpcr$DISEASE) %>%
  knitr::kable(caption = "Number of lesional and non-lesional samples per disease subcohort")

table(dat.qpcr$SITE, dat.qpcr$DISEASE) %>% 
    knitr::kable(caption = "Number of samples per biopsy site and disease subcohort")

```

### Cohort B: ELISA

```{r cohort_statB_ELISA}
table(dat.elisa$SEX, dat.elisa$DIS)
```

### Cohort B: Wieslab

### Cohort B: Flow Cytometry

### Microbiome Sorting

## Expression of complement proteins in the intestine of patients with IBD and healthy controls

Data from qPCR analysis will be presented as a heatmap and also as table with median + IQR. First, factor variables are reformatted for better presentation in the final heatmap. Next, the number of missing values per target is calculated and stored to file.

```{r qpcr_descriptive}

# Reformat factor columns
dat.qpcr$DISEASE <- factor(dat.qpcr$DISEASE, levels = c("Control","CD","UC"), labels = c("Control", "CD", "UC"))
dat.qpcr$LESIONAL <- factor(dat.qpcr$LESIONAL, levels = c("NL", "L"), labels = c("Non Lesional", "Lesional") )
dat.qpcr$HISTO <- factor(dat.qpcr$HISTO, levels = c(0:3), labels = c("No Inflammation", "Mild Inflammation", "Moderate Inflammation", "Severe Inflammation"))
targets <- names(dat.qpcr[7:ncol(dat.qpcr)]) # save names of qPCR targets into 1 variable
dat.qpcr$grouping <- paste(dat.qpcr$DISEASE, dat.qpcr$LESIONAL) # grouping variables for significance testings
dat.qpcr$grouping<-relevel(factor(dat.qpcr$grouping), "Control Non Lesional")  #relevel so that healthy is first

# Number of missing values for PCR results
na_count <-sapply(dat.qpcr, function(y) sum(length(which(is.na(y))))) %>% 
  data.frame() %>% 
  rownames_to_column("variable") %>%
  filter(variable %in% targets)
names(na_count) = c("Variable", "NA_Count") 
write_excel_csv(na_count, file = "results/qpcr/qpcr_targets_nacount.csv")

knitr::kable(na_count, caption = "Number of missing values per qPCR target")

#### Descriptive Statistics ####
desctable <- dat.qpcr %>%
  mutate(Group = paste(DISEASE, LESIONAL)) %>%
  select(-ID, -SITE, -HISTO, -grouping, - DISEASE, - LESIONAL)%>%
  gather(key = Target, value = value, C1q_alpha:VSIG4) %>%
  mutate(Group = relevel(as_factor(Group), ref ="Control Non Lesional")) %>%
  group_by(Target, Group) %>%
  summarize(
    count = n(),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    median = median(value, na.rm = TRUE),
    min = min(value, na.rm = TRUE),
    max = max(value, na.rm = TRUE),
    IQR = IQR(value, na.rm =TRUE)
  )

desctable2<- dat.qpcr %>%
  mutate(DISEASE=ifelse(DISEASE != "Control", "IBD", "Control"),
         Group = paste(DISEASE, LESIONAL)) %>%
  select(-ID, -SITE, -HISTO, -grouping, - DISEASE, - LESIONAL) %>%
  gather(key = Target, value = value, C1q_alpha:VSIG4) %>%
  mutate(Group = relevel(as_factor(Group), ref ="Control Non Lesional")) %>%
  group_by(Target, Group) %>%
  summarize(
    count = n(),
    mean = mean(value, na.rm = TRUE),
    sd = sd(value, na.rm = TRUE),
    median = median(value, na.rm = TRUE),
    min = min(value, na.rm = TRUE),
    max = max(value, na.rm = TRUE),
    IQR = IQR(value, na.rm =TRUE)
  )

```

For the publication, median and IQR values will be used because these data are not normally distributed. The table is rearranged to present these values and then saved to file:

```{r qpcr_descriptive_pubtable}
qpcr.descriptive1 = desctable %>%
  mutate(val = paste(round(median, 2), "±", round(IQR, 2))) %>%
  select(Target, Group, val) %>%
  pivot_wider(names_from = Group, values_from = val)

qpcr.descriptive2 = desctable2 %>%
  mutate(val = paste(round(median, 2), "±", round(IQR, 2))) %>%
  select(Target, Group, val) %>%
  pivot_wider(names_from = Group, values_from = val)

write_excel_csv(desctable, file = "results/qpcr/descriptivestats_uccd.csv")
write_excel_csv(desctable2, file = "results/qpcr/descriptivestats.csv")
write_excel_csv(qpcr.descriptive1, file = "results/qpcr/descriptivestats_uccd_publication.csv")
write_excel_csv(qpcr.descriptive2, file = "results/qpcr/descriptivestats_publication.csv")

knitr::kable(qpcr.descriptive1, caption = "Descriptive statistics of relative expression by disease entity and lesional status [median ± IQR]")

knitr::kable(qpcr.descriptive2, caption = "Descriptive statistics of relative expression by disease status (healthy vs IBD) and lesional status [median ± IQR]")
```

### Boxplots of relative expression

Next, relative expression is shown using boxplots for all targets. Both Control vs IBD and Control vs CD vs UC comparisons are performed:

```{r qpcr_boxplots}
#| warning: false
#| fig-height: 11
#| fig-width: 9
  
# drop unused columns
datbp <- select(dat.qpcr, -c(HISTO, SITE, grouping))
#melt datbp
datbpm <- melt(datbp, id.vars = c("ID", "LESIONAL", "DISEASE"))
levels(datbpm$DISEASE) = c("Control", "CD", "UC")
datbpm$DISEASE2 <-ifelse(datbpm$DISEASE == "Control", "Control", "IBD") %>% factor()


boxplot_healthy_ibd <- ggplot(datbpm, aes(x = DISEASE2, y = value)) + 
  stat_summary(aes(fill = LESIONAL), alpha = 0.8,
               position = position_dodge(preserve ="single"),
               fun.data = calc_boxplot_stat, geom = "boxplot") +
  labs(title = "Median ddCT", fill = "",x = "", y = "Expression (qPCR)")+
  scale_y_continuous() +
  theme_classic() +
    scale_fill_manual(values = my_cols) +
  facet_wrap(~variable, scales  = "free") +
  expand_limits(x = 0, y = 0) +
  theme(panel.spacing.y = unit(0.5, "cm"))

boxplot_disease <- ggplot(datbpm, aes(x = DISEASE, y = value)) + 
  stat_summary(aes(fill = LESIONAL), alpha = 0.8,
               position = position_dodge(preserve ="single"),
               fun.data = calc_boxplot_stat, geom = "boxplot")+
  labs(title = "Median ddCT", fill = "",x = "", y = "Expression (qPCR)")+
  scale_y_continuous() +
  theme_classic() +
  scale_fill_manual(values = my_cols) +
  facet_wrap(~variable, scales  = "free") +
  theme(panel.spacing.y = unit(0.5, "cm"))

ggsave(boxplot_healthy_ibd, filename = "results/qpcr/boxplot_ControlIBD.png", width = 8.2, height = 9)
ggsave(boxplot_healthy_ibd, filename = "results/qpcr/boxplot_ControlIBD.pdf", width = 8.2, height = 9)
ggsave(boxplot_disease, filename = "results/qpcr/boxplot_ControlCDUC.png", width = 8.5, height = 9)
ggsave(boxplot_disease, filename = "results/qpcr/boxplot_ControlCDUC.pdf", width = 8.7, height = 9)

boxplot_healthy_ibd
boxplot_disease
```

### Heatmaps

Heatmaps are plotted using separate helper functions. These are defined in a R script file which is stored in the *code* folder.

```{r qpcr_heatmap}
dat.m <- melt(dat.qpcr, id.vars=c("ID", "LESIONAL", "DISEASE", "SITE"))

## subsetting the original df, dropping site and histo, then calculating column mean and median by Disease and Lesion status --> 5 groups!
dat.means <- select(dat.qpcr, DISEASE, LESIONAL, all_of(targets)) %>% group_by(DISEASE, LESIONAL) %>% summarise_all(tibble::lst(mean), na.rm = TRUE)       
dat.medians <- select(dat.qpcr, DISEASE, LESIONAL, all_of(targets)) %>% group_by(DISEASE, LESIONAL) %>% summarise_all(tibble::lst(median), na.rm = TRUE)       

## Format Dataframes for heatmap        
heatmap_means <- prepare_df_hmp(datafr = dat.means, cutoffval = cutoffval)
heatmap_medians <- prepare_df_hmp(datafr = dat.medians, cutoffval = cutoffval)


## Plot both heatmaps and save to file
plot_heatmap(datafr = heatmap_medians, caption_string = "Macroscopic Aspect - Medians", file_suffix = "medians", dpival = 300)
plot_heatmap(datafr = heatmap_means, caption_string = "Macroscopic Aspect - Means", file_suffix = "means", dpival = 300)
```

Finally, statistical significance is assessed for all targets comparing lesional vs non-lesional sites within diseases and non-lesional sites from patients with controls.

```{r qpcr_statistics}
kruskalloop <- function(targets_list, n) {
  f <- as.formula(paste(targets_list[n], "~", "grouping"))
  kruskal.test(f, data = dat.qpcr)
}

kruskallist = list()

for (i in seq_along(targets)) {
  y = kruskalloop(targets,i)
  kruskallist[[targets[i]]] <- y        
}

kruskaltbl<-do.call(rbind, kruskallist)
kruskaltbl_print <- as.data.frame(kruskaltbl) %>%
  select(statistic, parameter, p.value, data.name) %>%
  rownames_to_column("Target") %>%
  select(Target, "p value" = p.value, "degrees of freedom" = parameter, "chi squared" = statistic)

wilcoxlist_bonf = list()
wilcoxlist_bonf2 = list()

dat.qpcr$grouping2 = ifelse(dat.qpcr$DISEASE=="Control", "Control", "IBD")
dat.qpcr$grouping2 = paste0(dat.qpcr$grouping2, ".", dat.qpcr$LESIONAL)

wilcoxloop_bonf <- function(targets_list, n) {
  f <- eval(parse(text = (paste0("dat.qpcr$", targets_list[n]))))
  pairwise.wilcox.test(f,dat.qpcr$grouping, p.adjust = "bonf", na.rm=T)
}

wilcoxloop_bonf2 <- function(targets_list, n) {
  f <- eval(parse(text = (paste0("dat.qpcr$", targets_list[n]))))
  pairwise.wilcox.test(f,dat.qpcr$grouping2, p.adjust = "bonf", na.rm=T)
}


for (i in seq_along(targets)) {
  wilcoxy = wilcoxloop_bonf(targets, i)
  wilcoxlist_bonf[[i]] <- wilcoxy
  wilcoxlist_bonf[[i]]$Target <- targets[i]
}

for (i in seq_along(targets)) {
  wilcoxy = wilcoxloop_bonf2(targets, i)
  wilcoxlist_bonf2[[i]] <- wilcoxy
  wilcoxlist_bonf2[[i]]$Target <- targets[i]
}

results_bonf <- do.call(rbind, wilcoxlist_bonf)
results_bonf2 <- do.call(rbind, wilcoxlist_bonf2)

bonf_resultlist = list()
bonf2_resultlist = list()

for (i in seq_along(targets)) {
  x <- unnest(as.data.frame(results_bonf), "Target")
  tab <- x %>%
    filter(Target == targets[i])
  tab<-as.data.frame(tab$p.value)
  bonf_resultlist[[targets[i]]] = tab
}   

for (i in seq_along(targets)) {
  x <- unnest(as.data.frame(results_bonf2), "Target")
  tab <- x %>%
    filter(Target == targets[i])
  tab<-as.data.frame(tab$p.value)
  bonf2_resultlist[[targets[i]]] = tab
}   

bonf_finalres = do.call(rbind, bonf_resultlist) %>% as.data.frame() %>%
  rownames_to_column("Variable") %>%
  mutate(Variable = str_replace(Variable, "[.]", "__")) %>%
  separate(Variable, into = c("Target", "Comparison"), sep = "__")
bonf2_finalres = do.call(rbind, bonf2_resultlist) %>% as.data.frame() %>%
  rownames_to_column("Variable") %>%
  mutate(Variable = str_replace(Variable, "[.]", "__")) %>%
  separate(Variable, into = c("Target", "Comparison"), sep = "__")

significance_ControlIBD = bonf2_finalres %>%
  filter(if_any(c(Control.Non.Lesional, IBD.Lesional), ~. < 0.05))
         
significance_ControlCDUC = bonf_finalres %>%
  filter(if_any(Control.Non.Lesional:UC.Lesional, ~. < 0.05))

# Write final Bonferroni corrected p-values to file
write_excel_csv(significance_ControlIBD, file = "results/qpcr/ControlVsIBD_pairwise-wilcox_bonferroni_filtered.csv")
write_excel_csv(significance_ControlCDUC, file = "results/qpcr/ControlVsCDUC_pairwise-wilcox_bonferroni_filtered.csv")

write_excel_csv(bonf2_finalres, file = "results/qpcr/ControlVsIBD_pairwise-wilcox_bonferroni.csv")
write_excel_csv(bonf_finalres, file = "results/qpcr/ControlVsCDUC_pairwise-wilcox_bonferroni.csv")

knitr::kable(significance_ControlIBD, digits = 2,
             caption = "Significantly differently expressed qPCR targets by disease status (pairwise wilcoxon tests")

knitr::kable(significance_ControlCDUC, digits = 2,
             caption = "Significantly differently expressed qPCR targets by disease entity (pairwise wilcoxon tests")

```

## Complement levels in feces and blood of patients with IBD

## Complement opsonisation of intestinal microbiota

Bacteria were isolated from fecal samples using centrifugation and washing steps and stained for complement and antibody opsonisation using the following antibodies:

***Insert antibody table here!***

```{r flow_cyt}
### For every FC Parameter (i.e. PERC_IGA, PERC_C3C, PERC_DBLEP, PERC_DBLEN, MED_C3C, MED_IGA, MEAN_C3C, MEAN_IGA):

# all summary stat with mean, sd,  median, iqr, min, max
# Summary statistics of x per DISEASE
# Summary statistics of x per HBI > 5 (Active CD)
# Correlation of x per HBI (CD only)
# Summary statistics of x  per pMayo > 2 (Active UC)
# Correlation of x  per pMayo (UC only)
# Summary statistics of x per Calpro Classes (50-250 as split)
# Correlation of x with Calprotectin


#### Per Disease ####
fcdat_summarystat = dat.fc %>%
  select(DIS, PERC_IGA:MEAN_IGA) %>%
  group_by(DIS) %>%
  summarise(across(everything(), list(mean = mean, sd = sd, median= median, IQR = IQR), 
                   na.rm =T, .names = "{col}__{fn}")) %>%
  tidyr::pivot_longer(cols = c(PERC_IGA__mean:MEAN_IGA__IQR), names_to = "var", values_to = "value") %>%
  tidyr::separate(var, into = c("Variable", "Stat"), sep ="__") %>%
  tidyr::pivot_wider(id_cols = c(Variable, DIS), names_from = Stat, values_from = value) %>%
  arrange(Variable, DIS)

# Significance testing per variable

stat.perc_iga = dat.fc %>%
  dplyr::select(DIS, PERC_IGA) %>%
  pairwise_wilcox_test(PERC_IGA ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_iga_p = ggboxplot(dat.fc, x = "DIS", y = "PERC_IGA") + 
  stat_pvalue_manual(stat.perc_iga, label ="p_round", y.position = c(90, 100, 110), tip.length = 0.01) +
  labs(x = "Disease", y="% of IgA pos. events")

stat.perc_c3c = dat.fc %>%
  dplyr::select(DIS, PERC_C3C) %>%
  pairwise_wilcox_test(PERC_C3C ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_c3c_p = ggboxplot(dat.fc, x = "DIS", y = "PERC_C3C") +
  coord_cartesian(ylim = c(0,9)) + 
  stat_pvalue_manual(stat.perc_c3c, label ="p_round", y.position = c(6, 7, 8), tip.length = 0.01) +
  labs(x = "Disease", y="% of C3c pos. events")

stat.perc_dblep = dat.fc %>%
  dplyr::select(DIS, PERC_DBLEP) %>%
  pairwise_wilcox_test(PERC_DBLEP ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_dblep_p = ggboxplot(dat.fc, x = "DIS", y = "PERC_DBLEP") +
  coord_cartesian(ylim = c(0,22)) + 
  stat_pvalue_manual(stat.perc_dblep, label ="p_round", y.position = c(18, 20, 22), tip.length = 0.01) +
  labs(x = "Disease", y="% of double pos. events")

stat.perc_dblen = dat.fc %>%
  dplyr::select(DIS, PERC_DBLEN) %>%
  pairwise_wilcox_test(PERC_DBLEN ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_dblen_p = ggboxplot(dat.fc, x = "DIS", y = "PERC_DBLEN") +
  coord_cartesian(ylim = c(0,112)) + 
  stat_pvalue_manual(stat.perc_dblen, label ="p_round", y.position = c(100,106,112), tip.length = 0.01) +
  labs(x = "Disease", y="% of double neg. events")
perc_dblen_p


percentages4_disease = cowplot::plot_grid(perc_iga_p, perc_c3c_p, perc_dblep_p, perc_dblen_p)

stat.med_iga = dat.fc %>%
  dplyr::select(DIS, MED_IGA) %>%
  pairwise_wilcox_test(MED_IGA ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

stat.med_c3c = dat.fc %>%
  dplyr::select(DIS, MED_C3C) %>%
  pairwise_wilcox_test(MED_C3C ~ DIS, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

med_iga_p = ggboxplot(dat.fc, x = "DIS", y = "MED_IGA") +
  coord_cartesian(ylim = c(0,1e10)) + 
  stat_pvalue_manual(stat.med_iga, label ="p_round", y.position = c(8.2e09, 10e09, 9.2e09), tip.length = 0.01) +
  labs(x = "Disease", y="Median IgA-APC fluorescence")
  
med_c3c_p = ggboxplot(dat.fc, x = "DIS", y = "MED_C3C") +
  coord_cartesian(ylim = c(0,1e10)) + 
  stat_pvalue_manual(stat.med_iga, label ="p_round", y.position = c(6e09, 7e09, 8e09), tip.length = 0.01) +
  labs(x = "Disease", y="Median C3c-FITC fluorescence")


perdisease_percentage = cowplot::plot_grid(perc_iga_p, perc_c3c_p, labels = c("A", "B"))
perdisease_median = cowplot::plot_grid(med_iga_p, med_c3c_p, labels = c("A", "B"))

#### Per Calpro Group ####
stat.perc_iga_calpro4 = dat.fc %>%
  dplyr::select(CALPRO4, PERC_IGA) %>%
  pairwise_wilcox_test(PERC_IGA ~ CALPRO4, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_iga_fcal4_boxplot = ggboxplot(filter(dat.fc, !is.na(CALPRO4), ), x = "CALPRO4", y = "PERC_IGA") +
coord_cartesian(ylim = c(0,100)) + 
  stat_pvalue_manual(stat.perc_iga_calpro4, label ="p_round", y.position = c(80, 90, 100), tip.length = 0.01) +
  labs(x = "Fecal Calprotectin (µg/g)", y="% of IgA pos. events") 

stat.perc_c3c_calpro4 = dat.fc %>%
  dplyr::select(CALPRO4, PERC_C3C) %>%
  pairwise_wilcox_test(PERC_C3C ~ CALPRO4, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p.adj, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

perc_c3c_fcal4_boxplot = ggboxplot(filter(dat.fc, !is.na(CALPRO4), ), x = "CALPRO4", y = "PERC_C3C") +
  coord_cartesian(ylim = c(0,9)) + 
  stat_pvalue_manual(stat.perc_c3c_calpro4, label ="p.adj.signif", y.position = c(6,7,8), tip.length = 0.01) +
  labs(x = "Fecal Calprotectin (µg/g)", y="% of C3c pos. events")

stat.med_iga_calpro4 = dat.fc %>%
  dplyr::select(CALPRO4, MED_IGA) %>%
  pairwise_wilcox_test(MED_IGA ~ CALPRO4, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

stat.med_c3c_calpro4 = dat.fc %>%
  dplyr::select(CALPRO4, MED_C3C) %>%
  pairwise_wilcox_test(MED_C3C ~ CALPRO4, p.adjust.method = "bonferroni") %>%
  mutate(p_round = round(p, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

cor_test(dat.fc, PERC_IGA, CALPRO, method = "spearman") # highly correlated
cor_test(dat.fc, PERC_C3C, CALPRO, method = "spearman") # not correlated at all

cor_test(dat.fc, MED_IGA, CALPRO, method = "spearman") # not correlated
cor_test(dat.fc, MED_C3C, CALPRO, method = "spearman") # highly correlated


med_iga_fcal4_boxplot = ggboxplot(filter(dat.fc, !is.na(CALPRO4), ), x = "CALPRO4", y = "MED_IGA") +
  coord_cartesian(ylim = c(0,1e10)) + 
  stat_pvalue_manual(stat.med_iga_calpro4, label ="p_round", y.position = c(8e09, 9e09, 1e10), tip.length = 0.01) +
  labs(x = "Fecal Calprotectin (µg/g)", y="Median IgA-APC fluorescence")

med_c3c_fcal4_boxplot = ggboxplot(filter(dat.fc, !is.na(CALPRO4), ), x = "CALPRO4", y = "MED_C3C") +
  coord_cartesian(ylim = c(0,8e09)) + 
  stat_pvalue_manual(stat.med_c3c_calpro4, label ="p_round", y.position = c(5e09, 6e09, 7e09), tip.length = 0.01) +
  labs(x = "Fecal Calprotectin (µg/g)", y="Median C3c-FITC fluorescence")

percalpro4_percentage = cowplot::plot_grid(perc_iga_fcal4_boxplot, perc_c3c_fcal4_boxplot, 
                                           labels = c("A", "B"))

percalpro4_medians = cowplot::plot_grid(med_iga_fcal4_boxplot, med_c3c_fcal4_boxplot, 
                                           labels = c("C", "D"))

ggsave(percalpro4_percentage, filename = "results/flow/PerCalpro4_Percentages_A-B.pdf", width = 5, height = 4)
ggsave(percalpro4_medians, filename = "results/flow/PerCalpro4_Medians_C-D.pdf", width = 5.5, height = 4)


fcdat_medians = dat.fc %>%
  select(CALPRO4, MED_C3C, MED_IGA) %>%
  tidyr::pivot_longer(cols = !CALPRO4, names_to = "var", values_to = "median_fluorescence")

fcdat_medians_wilcox = fcdat_medians %>%
  group_by(var) %>%
  pairwise_wilcox_test(median_fluorescence~CALPRO4) %>%
  mutate(p_round = round(p, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))

fcdat_percentage = dat.fc %>%
  select(CALPRO4, PERC_C3C, PERC_IGA) %>%
  tidyr::pivot_longer(cols = !CALPRO4, names_to = "var", values_to = "perc_pos") 

fcdat_percentage_wilcox = fcdat_percentage%>%
  group_by(var) %>%
  pairwise_wilcox_test(perc_pos~CALPRO4) %>%
  mutate(p_round = round(p, digits = 3),
         p_round = ifelse(p_round < 0.001, "< 0.001", p_round))
```

## Microbiome specificity of complement

sorting data

### Taxonomic data

### Functional mapping

PICRUST

## Microscopy

# Discussion

# Appendix

## References

## Supplementary information
